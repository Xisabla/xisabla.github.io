{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["// ---- Methods --------------------------------------------------------------------------\n\n/**\n * Add \"current\" class to navbar link corresponding to the current section\n * @param navbarLinks All navbar links with corresponding section id\n * @param sections All sections with corresponding id as name and top offset as top\n * @param force If set on true, will force updating the navbar links even if it shouldn't have any change\n * @returns \n */\nfunction updateNavbarSection(navbarLinks, sections, force = false) {\n    const scrollY = window.scrollY\n\n    // All sections above the scrollY limit, the last one is the current section\n    const aboveSections = sections\n        .filter((section) => section.top <= scrollY)\n\n    // Skip on error\n    if(aboveSections.length === 0) return\n\n    const currentSection = aboveSections[aboveSections.length - 1]\n    const previousCurrentLink = navbarLinks.filter((item) => item.a.classList.contains('current') && item.section !== currentSection.id)\n    \n    // No change, skip if not on initialize step\n    if(previousCurrentLink.length === 0 && !force) return\n\n    // Remove current class on previous items\n    previousCurrentLink.forEach((item) => item.a.classList.remove('current'))\n\n    \n    // Current item changed, add current class to new item\n    const currentLink = navbarLinks.find((item) => item.section === currentSection.id)\n    if(currentLink) currentLink.a.classList.add('current')\n}\n\n// ---- Elements -------------------------------------------------------------------------\n\nconst navbar = document.querySelector('nav#main-nav')\n\nconst navbarItems = [...navbar.querySelectorAll('a')]\n    .filter((item) => item.getAttribute('href').startsWith('#'))\n    .map((a) => ({ section: a.getAttribute('href').slice(1), a }))\n\nconst sections = [...document.querySelectorAll('section')]\n    .map((section) => ({ id: section.id, section, top: section.offsetTop }))\n\n// ---- Events ---------------------------------------------------------------------------\n\nwindow.addEventListener('scroll', () => {\n    // Skip cases\n    if(navbarItems.length === 0) return\n    if(sections.length === 0) return\n    if(window.scrollY < 0) return\n\n    updateNavbarSection(navbarItems, sections)\n})\n\n// ---- Sky rocket -----------------------------------------------------------------------\n\n// Initialize navbar section update\nupdateNavbarSection(navbarItems, sections, true)\n\nconsole.log('\uD83D\uDE80')\n"],
  "mappings": "MASA,WAA6B,EAAa,EAAU,EAAQ,GAAO,CAC/D,GAAM,GAAU,OAAO,QAGjB,EAAgB,EACjB,OAAO,AAAC,GAAY,EAAQ,KAAO,GAGxC,GAAG,EAAc,SAAW,EAAG,OAE/B,GAAM,GAAiB,EAAc,EAAc,OAAS,GACtD,EAAsB,EAAY,OAAO,AAAC,GAAS,EAAK,EAAE,UAAU,SAAS,YAAc,EAAK,UAAY,EAAe,IAGjI,GAAG,EAAoB,SAAW,GAAK,CAAC,EAAO,OAG/C,EAAoB,QAAQ,AAAC,GAAS,EAAK,EAAE,UAAU,OAAO,YAI9D,GAAM,GAAc,EAAY,KAAK,AAAC,GAAS,EAAK,UAAY,EAAe,IAC/E,AAAG,GAAa,EAAY,EAAE,UAAU,IAAI,WAKhD,GAAM,GAAS,SAAS,cAAc,gBAEhC,EAAc,CAAC,GAAG,EAAO,iBAAiB,MAC3C,OAAO,AAAC,GAAS,EAAK,aAAa,QAAQ,WAAW,MACtD,IAAI,AAAC,GAAO,EAAE,QAAS,EAAE,aAAa,QAAQ,MAAM,GAAI,OAEvD,EAAW,CAAC,GAAG,SAAS,iBAAiB,YAC1C,IAAI,AAAC,GAAa,EAAE,GAAI,EAAQ,GAAI,UAAS,IAAK,EAAQ,aAI/D,OAAO,iBAAiB,SAAU,IAAM,CAEpC,AAAG,EAAY,SAAW,GACvB,EAAS,SAAW,GACpB,QAAO,QAAU,GAEpB,EAAoB,EAAa,MAMrC,EAAoB,EAAa,EAAU,IAE3C,QAAQ,IAAI",
  "names": []
}
